---
defaultBaseImageVersion: latest
stages:
  - name: Build
    inputs:
      - type: git
        branch: master
        service: ${SAMPLE_REPO}        
    triggers:
      - type: commit
    jobs:
      - name: Changelog
        type: builder
        build_type: shell
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          # This script just dumps the changes included in this build into a file named changelog.txt
          # This change log can be used later to be included in notifications
          git log ${GIT_COMMIT}..HEAD --graph --oneline > changelog.txt
          cat changelog.txt
      - name: NPM
        type: builder
        build_type: npm
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          apt-get install -y bzip2
          npm install
          tar -czf node_modules.tar.gz node_modules
          rm -rf node_modules 
  - name: 'Run Unit Tests'
    inputs:
      - type: job
        stage: Build
        job: NPM
    triggers:
      - type: stage
    jobs:
      - name: Linting
        type: tester
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          tar -xzf node_modules.tar.gz
          node ./node_modules/gulp/bin/gulp lint
        enable_tests: true
        test_file_pattern: 'test/*.xml'
      - name: Unit Tests
        type: tester
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          export PATH=/opt/IBM/node-v4.6.0/bin:$PATH
          # Karma Unit Test, output file: test/*.xml
          tar -xzf node_modules.tar.gz
          node ./node_modules/gulp/bin/gulp dev-karma
          # Mocha Unit Test, output file: test/*.xml
          node ./node_modules/gulp/bin/gulp dev-mocha
          # Mocha Api Unit Test, output file: xunit.xml
          node ./node_modules/mocha/bin/mocha --recursive --reporter xunit-file test/api/ --exit
        enable_tests: true
        test_file_pattern: '*.xml, test/*.xml'
  - name: Deploy to Test
    inputs:
      - type: job
        stage: 'Build'
        job: Changelog
    triggers:
      - type: stage
    properties:
    - name: APP_NAME
      value: undefined
      type: text
    - name: APP_URL
      value: undefined
      type: text	
    jobs:
      - name: Blue/Green Deploy
        type: deployer
        target:
          region_id: ${TEST_REGION_ID}
          organization: ${TEST_ORGANIZATION}
          space: ${TEST_SPACE}
          application: ${CF_APP_NAME}
          api_key: ${API_KEY}
        script: |-
          #!/bin/bash
          BLUE_APP="$CF_APP-test-blue"
          GREEN_APP="$CF_APP-test-green"
          cf push "${BLUE_APP}" -n "${CF_APP}-test"
          cf app "${GREEN_APP}" && cf stop "${GREEN_APP}"
          cf app "${GREEN_APP}" && cf delete "${GREEN_APP}" -f
          cf rename "${BLUE_APP}" "${GREEN_APP}"
          export APP_NAME="$GREEN_APP"
          export APP_URL=http://$(cf app $APP_NAME | grep -e urls: -e routes: | awk '{print $2}')
  - name: 'Run Tests - Performance & Scale'
    inputs:
      - type: job
        stage: 'Build'
        job: NPM
    triggers:
      - type: stage
    properties:
      - name: APP_URL
        value: undefined
        type: text	
    jobs:
      - name: Sauce Labs Tests
        type: tester
        extension_id: ibm.devops.services.pipeline.saucelabs
        services:
          - ${SAUCE_LABS}
        DL_ASSETS: 'false'
        SELECT_CMD: custom
        COMMAND: |-
          #!/bin/bash
          tar -xzf node_modules.tar.gz
          if [[ ${CF_APP} == '' ]];
          then
            echo 'Test App is missing!'
          else
            npm test
          fi      
        enable_tests: true
        test_file_pattern: '*.xml'        
  - name: Deploy to Prod
    inputs:
      - type: job
        stage: 'Build'
        job: Changelog
    triggers:
      - type: stage
    properties:
    - name: APP_NAME
      value: undefined
      type: text
    - name: APP_URL
      value: undefined
      type: text	
    jobs:
      - name: Blue/Green Deploy
        type: deployer
        target:
          region_id: ${PROD_REGION_ID}
          organization: ${PROD_ORGANIZATION}
          space: ${PROD_SPACE}
          application: ${CF_APP_NAME}
          api_key: ${API_KEY}
        script: |-
          #!/bin/bash
          BLUE_APP="$CF_APP-blue"
          GREEN_APP="$CF_APP-green"
          cf push "${BLUE_APP}" -n "${CF_APP}"
          cf app "${GREEN_APP}" && cf stop "${GREEN_APP}"
          cf app "${GREEN_APP}" && cf delete "${GREEN_APP}" -f
          cf rename "${BLUE_APP}" "${GREEN_APP}"
          export APP_NAME="$GREEN_APP"
          export APP_URL=http://$(cf app $APP_NAME | grep -e urls: -e routes: | awk '{print $2}')

          # Instant Purging removes content from Fastly immediately so it can be refreshed from your origin servers.
          # The main entry point http://api.fastly.com/ for the API is not needed for an individual URL Instant Purge.
          curl -X PURGE ${APP_URL}
