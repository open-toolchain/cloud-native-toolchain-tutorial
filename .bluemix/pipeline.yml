---
defaultBaseImageVersion: latest
properties:
- name: API_KEY
  value: ${API_KEY}
  type: secure
- name: COMMONS_HOSTED_REGION
  value: ${COMMONS_HOSTED_REGION}
  type: text
  default: "https://raw.githubusercontent.com/open-toolchain/commons/master"
- name: APP_REPO_BRANCH
  value: ${APP_REPO_BRANCH}
  type: text
stages:
  - name: Build
    inputs:
      - type: git
        branch: ${APP_REPO_BRANCH}
        service: ${SAMPLE_REPO}
    properties:
    - name: APP_NAME
      value: ${CF_APP_NAME}
      type: text
    triggers:
      - type: commit
    jobs:
      - name: Changelog
        type: builder
        build_type: shell
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          # This script just dumps the changes included in this build into a file named changelog.txt
          # This change log can be used later to be included in notifications
          git log ${GIT_COMMIT}..HEAD --graph --oneline > changelog.txt
          cat changelog.txt
      - name: NPM
        type: builder
        build_type: npm
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          apt-get install -y bzip2
          npm install
          tar -czf node_modules.tar.gz node_modules
          rm -rf node_modules
          source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/fetch_git_creds.sh")
          BUILD_STATUS=pass
          if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
            ibmcloud login --apikey ${API_KEY} --no-region
            ibmcloud doi publishbuildrecord --logicalappname="$APP_NAME" --buildnumber=$BUILD_NUMBER --branch=$GIT_BRANCH --repositoryurl=$GIT_URL --commitid=$GIT_COMMIT --status=$BUILD_STATUS
          fi
  - name: 'Run Unit Tests'
    inputs:
      - type: job
        stage: Build
        job: NPM
    properties:
    - name: APP_NAME
      value: ${CF_APP_NAME}
      type: text
    triggers:
      - type: stage
    jobs:
      - name: Linting
        type: tester
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          tar -xzf node_modules.tar.gz
          node ./node_modules/gulp/bin/gulp lint
        enable_tests: true
        test_file_pattern: 'test/*.xml'
      - name: Unit Tests
        type: tester
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          export PATH=/opt/IBM/node-v4.6.0/bin:$PATH
          if [ -f ./test/run-tests.sh ]; then
            source ./test/run-tests.sh
            ibmcloud login --apikey $API_KEY --no-region
            IFS=';' read -ra locations <<< "$FILE_LOCATIONS"
            IFS=';' read -ra types <<< "$TEST_TYPES"
            if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
              for i in "${!locations[@]}"
              do
                echo "$i ${locations[i]} ${types[i]}"
                ibmcloud doi publishtestrecord --logicalappname=${APP_NAME} --buildnumber=$BUILD_NUMBER --filelocation=${locations[i]} --type=${types[i]}
              done
            fi
          else
           echo "Test runner script not found: ./test/run-tests.sh"
          fi
          rm -rf node_modules
  - name: Deploy to Test
    inputs:
      - type: job
        stage: 'Build'
        job: NPM
    triggers:
      - type: stage
    properties:
    - name: APP_NAME
      value: undefined
      type: text
    - name: APP_URL
      value: undefined
      type: text
    jobs:
      - name: Blue/Green Deploy
        type: deployer
        target:
          region_id: ${TEST_REGION_ID}
          organization: ${TEST_ORGANIZATION}
          space: ${TEST_SPACE}
          application: ${CF_APP_NAME}
          api_key: ${API_KEY}
        script: |-
          #!/bin/bash
          BLUE_APP="$CF_APP-test-blue"
          GREEN_APP="$CF_APP-test-green"
          cf push "${BLUE_APP}" -n "${CF_APP}-test"
          cf app "${GREEN_APP}" && cf stop "${GREEN_APP}"
          cf app "${GREEN_APP}" && cf delete "${GREEN_APP}" -f
          cf rename "${BLUE_APP}" "${GREEN_APP}"
          export APP_NAME="$GREEN_APP"
          export APP_URL=http://$(cf app $APP_NAME | grep -e urls: -e routes: | awk '{print $2}')
      - name: Deployment Manifest
        type: builder
        build_type: shell
        curatedDockerImage: latest
        script: |-
          #!/bin/bash
          # This script just dumps the deployment APP_URL, APP_NAME and CF_APP_NAME
          # into a file named deployment.properties that will be used in subsequent stage(s)
          echo "APP_NAME=${APP_NAME}" > deployment.properties
          echo "APP_URL=${APP_URL}" >> deployment.properties
          echo "CF_APP_NAME=${APP_NAME}" >> deployment.properties
  - name: 'Run Tests - Performance & Scale'
    inputs:
      - type: job
        stage: 'Deploy to Test'
        job: 'Deployment Manifest'
    triggers:
      - type: stage
    properties:
      - name: deployment_properties
        value: deployment.properties
        type: file	
    jobs:
      - name: Sauce Labs Tests
        type: tester
        extension_id: ibm.devops.services.pipeline.saucelabs
        services:
          - ${SAUCE_LABS}
        DL_ASSETS: 'false'
        SELECT_CMD: custom
        COMMAND: |-
          #!/bin/bash
          # restore node_modules
          tar -xzf node_modules.tar.gz
          # ensure app is deployed
          if [[ ${CF_APP_NAME} == '' ]];
          then
            echo 'Test App is missing!'
          else
            npm test
          fi
        enable_tests: true
        test_file_pattern: 'test/saucelabs-results.xml'
  - name: Deploy to Prod
    inputs:
      - type: job
        stage: 'Build'
        job: NPM
    triggers:
      - type: stage
    properties:
    - name: APP_NAME
      value: undefined
      type: text
    - name: APP_URL
      value: undefined
      type: text
    jobs:
      - name: Blue/Green Deploy
        type: deployer
        target:
          region_id: ${PROD_REGION_ID}
          organization: ${PROD_ORGANIZATION}
          space: ${PROD_SPACE}
          application: ${CF_APP_NAME}
          api_key: ${API_KEY}
        script: |-
          #!/bin/bash
          BLUE_APP="$CF_APP-blue"
          GREEN_APP="$CF_APP-green"
          cf push "${BLUE_APP}" -n "${CF_APP}"
          cf app "${GREEN_APP}" && cf stop "${GREEN_APP}"
          cf app "${GREEN_APP}" && cf delete "${GREEN_APP}" -f
          cf rename "${BLUE_APP}" "${GREEN_APP}"
          export APP_NAME="$GREEN_APP"
          export APP_URL=http://$(cf app $APP_NAME | grep -e urls: -e routes: | awk '{print $2}')

          # Instant Purging removes content from Fastly immediately so it can be refreshed from your origin servers.
          # The main entry point http://api.fastly.com/ for the API is not needed for an individual URL Instant Purge.
          curl -X PURGE ${APP_URL}
